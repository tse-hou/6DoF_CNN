setwd("E:/silver/dqn/draft_dataset")
raw.db <- read.csv("20191205.csv")
raw.db %>% View()
views.list <- raw.db$X.viewperpasses %>% as.character() %>% strsplit(split=", ")
lapply(views.list, function(x){tmp = as.numeric(x); max(tmp)}) %>% unlist
library(dplyr)
setwd("E:/silver/dqn/draft_dataset")
raw.db <- read.csv("20191205.csv")
raw.db %>% View()
views.list <- raw.db$X.viewperpasses %>% as.character() %>% strsplit(split=", ")
lapply(views.list, function(x){tmp = as.numeric(x); max(tmp)}) %>% unlist()
views.list <- raw.db$X.viewperpasses %>%
as.character() %>%
strsplit(split=", ") %>%
lapply(views.list, function(x){tmp = as.numeric(x); max(tmp)}) %>%
unlist()
views.list
views.list <- raw.db$X.viewperpasses %>%
as.character() %>%
strsplit(split=", ") %>%
lapply(views.list, function(x){tmp = as.numeric(x); max(tmp)}) %>%
unlist()
views.list <- raw.db$X.viewperpasses %>%
as.character() %>%
strsplit(split=", ") %>%
lapply(function(x){tmp = as.numeric(x); max(tmp)}) %>%
unlist()
views.list
raw.db <- read.csv("20191205.csv")
db <- raw.db
raw.db %>% View()
views.list <- raw.db$X.viewperpasses %>%
as.character() %>%
strsplit(split=", ") %>%
lapply(function(x){tmp = as.numeric(x); max(tmp)}) %>%
unlist()
db$max_views <- views.list
db$
exit
db$max_views
db %>% View()
raw.db %>% filter(passes ==1)
raw.db  %>% names()
raw.db %>% filter(X.passes ==1)
raw.db  %>% View()
raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses)
raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses,Execution.time..sec.)
theo.time <- raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses,Execution.time..sec.)
theo.time <- raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses,Execution.time..sec.)
names(theo.time) <- c( "Dataset", 'max_views' 'theo.time')
names(theo.time) <- c( "Dataset", 'max_views' 'theo_time')
names(theo.time) <- c( "Dataset", 'max_views', 'theo_time')
theo.time
left_join(db,theo.time)
db$max_views
theo.time
class(db$max_views)
class(theo.time$max_views)
theo.time
theo.time$max_views <- theo.time$max_views %>% as.numeric()
left_join(db,theo.time)
db <- left_join(db,theo.time)
library(dplyr)
setwd("E:/silver/dqn/draft_dataset")
raw.db <- read.csv("20191205.csv")
db <- raw.db
raw.db %>% View()
views.list <- raw.db$X.viewperpasses %>%
as.character() %>%
strsplit(split=", ") %>%
lapply(function(x){tmp = as.numeric(x); max(tmp)}) %>%
unlist()
db$max_views <- views.list
db %>% View()
theo.time <- raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses,Execution.time..sec.)
names(theo.time) <- c( "Dataset", 'max_views', 'theo_time')
theo.time$max_views <- theo.time$max_views %>% as.numeric()
db <- left_join(db,theo.time)
db %>% Views()
db %>% View
theo.time
theo.time <- raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses,Execution.time..sec.)
theo.time
names(theo.time) <- c( "Dataset", 'max_views', 'theo_time')
theo.time$max_views <- theo.time$max_views %>% as.numeric()
theo.time
theo.time$max_views %>% as.numeric()
theo.time$max_views
library(dplyr)
setwd("E:/silver/dqn/draft_dataset")
raw.db <- read.csv("20191205.csv")
db <- raw.db
# raw.db %>% View()
views.list <- raw.db$X.viewperpasses %>%
as.character() %>%
strsplit(split=", ") %>%
lapply(function(x){tmp = as.numeric(x); max(tmp)}) %>%
unlist()
db$max_views <- views.list
db %>% View()
theo.time <- raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses,Execution.time..sec.)
names(theo.time) <- c( "Dataset", 'max_views', 'theo_time')
theo.time
theo.time$max_views %>% as.numeric()
theo.time$max_views %>% as.character()
theo.time$max_views %>% as.character() %>% as.numeric(
)
theo.time$max_views <- theo.time$max_views %>% as.character() %>% as.numeric()
db <- left_join(db,theo.time)
db %>% View
(db$WS.PSNR-30)/db$theo_time
db$CEL <- (db$WS.PSNR-30)/db$theo_time
db$CEL
db %>% View
names(db)
db.view <- db %>% select(Dataset, X.passes, X.viewperpasses, CEL)
db.view %>% View()
db.view <- db %>% select(Dataset, X.passes, X.viewperpasses,WS.PSNR, CEL)
db.view %>% View()
library(dplyr)
setwd("E:/silver/dqn/draft_dataset")
raw.db <- read.csv("20191205.csv")
db <- raw.db
# raw.db %>% View()
views.list <- raw.db$X.viewperpasses %>%
as.character() %>%
strsplit(split=", ") %>%
lapply(function(x){tmp = as.numeric(x); max(tmp)}) %>%
unlist()
db$max_views <- views.list
db %>% View()
theo.time <- raw.db %>% filter(X.passes ==1) %>% select(Dataset, X.viewperpasses,Execution.time..sec.)
names(theo.time) <- c( "Dataset", 'max_views', 'theo_time')
theo.time$max_views <- theo.time$max_views %>% as.character() %>% as.numeric()
db <- left_join(db,theo.time)
db$CEL <- (db$WS.PSNR-30)/db$theo_time
db.view <- db %>% select(Dataset, X.passes, X.viewperpasses,WS.PSNR, CEL)
db.view %>% View()
install.packages("rjson")
library("rjson")
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "")
# Give the input file name to the function.
result <- fromJSON(file = "TechnicolorMuseum.json")
result
names(result)
result$BoundingBox_center
result$Frames_number
result$Fps
result$Informative
result$cameras
length(result$cameras)
result$cameras[1]
result$cameras[[1]]
result$cameras[[2]]
result$cameras[[3]]
result$cameras[[4]]
as.data.frame(result$cameras)
result$cameras
result$cameras[[4]]
result$cameras[[4]] %>% unlist()
result$cameras[[0]] %>% unlist()
result$cameras[[1]] %>% unlist()
result$cameras[[2]] %>% unlist()
result$cameras[[3]] %>% unlist()
result$cameras[[3]] %>% names()
rbindlist(names)
library(data.table)
rbindlist(result)
rbindlist(result[-1])
result[-1]
names(result)
names(result$cameras[[3]])
length(result$cameras
)
for (i in 0:length(result$cameras)){
if(i == 0){
temp = data.frame(name = result$cameras[[i]]$NAME,
Position= result$cameras[[i]]$Position,
rotation= result$cameras[[i]]$Rotation)
} else {
temp = rbind(temp,  data.frame(name = result$cameras[[i]]$NAME,
Position= result$cameras[[i]]$Position,
rotation= result$cameras[[i]]$Rotation))
}
}
result$cameras[[i]]
i
result$cameras[i]
result$cameras
result$cameras[[2]]
for (i in 1:length(result$cameras)){
if(i == 1){
temp = data.frame(name = result$cameras[[i]]$NAME,
Position= result$cameras[[i]]$Position,
rotation= result$cameras[[i]]$Rotation)
} else {
temp = rbind(temp,  data.frame(name = result$cameras[[i]]$NAME,
Position= result$cameras[[i]]$Position,
rotation= result$cameras[[i]]$Rotation))
}
}
i
result$cameras[[i]]$NAME
names(result$cameras[[1]])
Rows <- unique(unlist(lapply(result, rownames)))
Rows
Rows <- unique(unlist(lapply(result$cameras, rownames)))
Rows
lapply(result$cameras, rownames)
Rows <- unique(unlist(lapply(result$cameras, names)))
Rows
myMat <- matrix(NA, ncol = length(Cols), nrow = length(x),
dimnames = list(Cols, sapply(x, rownames)))
myMat <- matrix(NA, ncol = length(Cols), nrow = length(x),
dimnames = list(Cols, sapply(result$cameras, rownames)))
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(Cols, sapply(result$cameras, rownames)))
Cols <- unique(unlist(lapply(result$cameras, names)))
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(Cols, sapply(result$cameras, rownames)))
sapply(result$cameras, rownames)
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(Cols, sapply(result$cameras, colnames)))
sapply(result$cameras, colnames)
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(,Cols))
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(NA,Cols))
Cols
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
myMat
for (i in seq_along(result$cameras)) {
myMat[colnames(result$cameras[[i]]), i] <- result$cameras[[i]]
}
myMat
for (i in seq_along(result$cameras)) {
myMat[colnames(result$cameras[[i]]), i] <- result$cameras[[i]]
}
seq_along(result$cameras)
colnames(result$cameras[[i]])
colnames(result$cameras[[1]])
result$cameras[[1]]
result$cameras[[1]]names(result$cameras[[i]])
result$cameras[[1]]names(result$cameras[[i]])
names(result$cameras[[i]])
result$cameras[[i]]
for (i in seq_along(result$cameras)) {
myMat[names(result$cameras[[i]]), i] <- result$cameras[[i]]
}
names(result$cameras[[i]])
result$cameras[[i]]
result$cameras[[i]] %>% unlist()
myMat[names(result$cameras[[i]]), i] <- result$cameras[[i]] %>% unlist()
myMat[names(result$cameras[[i]]), i]
myMat
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
myMat[names(result$cameras[[i]]), i]
myMat
myMat[names(result$cameras[[1]]), 1]
myMat[names(1, result$cameras[[1]])]
myMat[1, names(result$cameras[[1]])]
myMat[i, names(result$cameras[[i]])]
myMat[i, names(result$cameras[[i]])] <- result$cameras[[i]]
myMat[i, names(result$cameras[[i]])]
myMat
for (i in seq_along(result$cameras)) {
myMat[i, names(result$cameras[[i]])] <- result$cameras[[i]] %>% unlist()
}
myMat
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
myMat[i, names(result$cameras[[i]])] <- result$cameras[[i]] %>% unlist()
}
myMat
result$cameras[[i]] %>% unlist()
myMat[i, names(result$cameras[[i]])]
Cols
lapply(result$cameras, names)
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
myMat
result$cameras[[i]]
length(result$cameras[[i]])
names(result$cameras[[i]])
names(result$cameras[[i]])[0]
names(result$cameras[[i]])[1]
result$cameras[[i]][j]
result$cameras[[i]][1]
result$cameras[[i]][[1]]
for (j in seq_along(result$cameras[[i]])) {
myMat[i, names(result$cameras[[i]])[j]] <- result$cameras[[i]][[j]]
}
result$cameras[[i]][[j]]
paste(result$cameras[[i]][[j]],sep=';')
result$cameras[[i]][[j]] %>% class()
result$cameras[[i]][[j]] %>% length()
paste(result$cameras[[i]][[j]],sep=';')
paste(result$cameras[[i]][[j]],sep=';') %>% length()
paste(result$cameras[[i]][[j]],sep=';')
paste(result$cameras[[i]][[j]],sep=';') %>% paste(sep=';')
paste(result$cameras[[i]][[j]],sep=',')
result$cameras[[i]]
result$cameras[[i]] %>% unlist
result$cameras[[i]] %>% unlist()
Cols <- unique(unlist(lapply(result$cameras%>% unlist(), names)))
Cols
result$cameras%>% unlist()
result$cameras%>% unlist(), names
lapply(result$cameras%>% unlist(), names)
Cols <- unique(unlist(lapply(result$cameras%>% unlist(), names)))
Cols
result$cameras%>% unlist()
lapply(result$cameras%>% unlist(), names)
unlist(lapply(result$cameras%>% unlist(), names))
result$cameras%>% unlist(), names
result$cameras%>% unlist()
result$cameras%>% unlist() %>% names()
result$cameras%>% unlist() %>% names() %>% nique
result$cameras%>% unlist() %>% names() %>% unique
Cols <- result$cameras%>% unlist() %>% names() %>% unique
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
myMat
i = 2
result$cameras[[i]]
result$cameras[[i]] %>% unlist
myMat[i, names(result$cameras[[i]]) <- result$cameras[[i]] %>% unlist
myMat[i, names(result$cameras[[i]])] <- result$cameras[[i]] %>% unlist
for (i in seq_along(result$cameras)) {
myMat[i, names(result$cameras[[i]])] <- result$cameras[[i]] %>% unlist
}
Cols <- result$cameras%>% unlist() %>% names() %>% unique
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
myMat[i, names(result$cameras[[i]])] <- result$cameras[[i]] %>% unlist
}
myMat[i, names(result$cameras[[i]])]
{
{
for (i in seq_along(result$cameras)) {
}
for (i in seq_along(result$cameras)) {
}
Cols <- result$cameras%>% unlist() %>% names() %>% unique
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
Cols <- result$cameras%>% unlist() %>% names() %>% unique
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
}
for (i in seq_along(result$cameras)) {
}
for (i in seq_along(result$cameras)) {
myMat[i, names( result$cameras[[i]] %>% unlist()] <- result$cameras[[i]] %>% unlist()
}
myMat
myMat[i, names( result$cameras[[i]] %>% unlist()]
names( result$cameras[[i]] %>% unlist())
myMat[i, names( result$cameras[[i]] %>% unlist())]
result$cameras[[i]] %>% unlist()
myMat <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
myMat[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
myMat
myMat %>% View()
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "TechnicolorMuseum.json")
names(result)
Cols <- result$cameras%>% unlist() %>% names() %>% unique
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
cam.para %>% View()
rm(list=ls())
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
library(dplyr)
# Give the input file name to the function.
result <- fromJSON(file = "TechnicolorMuseum.json")
Cols <- result$cameras%>% unlist() %>% names() %>% unique
names(result)
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
cam.para %>% View()
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
rm(list=ls())
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
library(dplyr)
# Give the input file name to the function.
result <- fromJSON(file = "TechnicolorMuseum.json")
names(result)
result
Cols <- result$cameras%>% unlist() %>% names() %>% unique
Cols
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
cam.para %>% View()
datasets <- c("TechnicolorMuseum","ClassroomVideo", "TechnicolorHijack")
# Give the input file name to the function.
result <- fromJSON(file = "TechnicolorMuseum.json")
rm(list=ls())
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
library(dplyr)
datasets <- c("TechnicolorMuseum","ClassroomVideo", "TechnicolorHijack")
for (i in datasets){
# Give the input file name to the function.
result <- fromJSON(file = paste0(i,".json"))
names(result)
Cols <- result$cameras%>% unlist() %>% names() %>% unique
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
cam.para %>% View()
write.csv(cam.para,file = paste0(i,".csv"),row.names = FALSE, col.names = TRUE, sep = ',')
}
rm(list=ls())
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
library(dplyr)
datasets <- c("TechnicolorMuseum","ClassroomVideo", "TechnicolorHijack")
for (i in datasets){
# Give the input file name to the function.
result <- fromJSON(file = paste0(i,".json"))
names(result)
Cols <- result$cameras%>% unlist() %>% names() %>% unique
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
cam.para %>% View()
write.csv(cam.para,file = paste0(i,".csv"),row.names = FALSE, col.names = TRUE)
}
rm(list=ls())
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
library(dplyr)
datasets <- c("TechnicolorMuseum","ClassroomVideo", "TechnicolorHijack")
for (i in datasets){
# Give the input file name to the function.
result <- fromJSON(file = paste0(i,".json"))
names(result)
Cols <- result$cameras%>% unlist() %>% names() %>% unique
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
cam.para %>% View()
write.csv(cam.para,file = paste0(i,".csv"),row.names = FALSE)
}
rm(list=ls())
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
library(dplyr)
datasets <- c("TechnicolorMuseum","ClassroomVideo", "TechnicolorHijack")
for (n in datasets){
# Give the input file name to the function.
result <- fromJSON(file = paste0(i,".json"))
names(result)
Cols <- result$cameras%>% unlist() %>% names() %>% unique
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
cam.para %>% View()
write.csv(cam.para,file = paste0(n,".csv"),row.names = FALSE)
}
rm(list=ls())
setwd("E:/silver/dqn/camera_parameters")
library("rjson")
library(dplyr)
datasets <- c("TechnicolorMuseum","ClassroomVideo", "TechnicolorHijack")
for (n in datasets){
# Give the input file name to the function.
result <- fromJSON(file = paste0(n,".json"))
names(result)
Cols <- result$cameras%>% unlist() %>% names() %>% unique
cam.para <- matrix(NA, ncol = length(Cols), nrow = length(result$cameras),
dimnames = list(1:length(result$cameras),Cols))
for (i in seq_along(result$cameras)) {
cam.para[i, names( result$cameras[[i]] %>% unlist())] <- result$cameras[[i]] %>% unlist()
}
cam.para %>% View()
write.csv(cam.para,file = paste0(n,".csv"),row.names = FALSE)
}
